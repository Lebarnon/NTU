Assignment 2 is Individual Submission by each student (not group work) who has two choices. Choose only one and submit a report (not more than five pages) written in Microsoft Word or Latex (https://www.overleaf.com/). You can use Notebook and attach it as Code in Appendix or convert into a readable PDF or Word document for upload.  

Choice 1: Study Google Pagerank Algorithm and Mapreduce (Mapper & Reducer functions). Your resport should have a section discussing how you explore tuning problem parameters (e.g., teleportation probability, web graph matrix M, distribution vector E etc) and a section of numerical examples and experiments of Google Pagerank Algorithm implemented in your preferred programming language. Start with the illustrative example of four-webpages on Slide 53 of Lecture 7 and then consider larger graphs. Validate that the Pagerank Algorithm converges numerically to the closed form solutions (two closed forms were given in Lecture). See  a reference in Matlab: https://www.mathworks.com/help/matlab/math/use-page-rank-algorithm-to-rank-websites.html. Lastly, describe how your Pagerank may be implemented in a parallel programming framework like MapReduce/Hadoop (i.e., Mapper and Reducer Functions).

Choice 2: Study basics of Google Cloud SaaS (i.e., Cloud Shell) and LLM functions in Question 6 of Tutorial 3. You may need to know Javascript (and, if not, all the more a good reason to learn Javascript and to learn from Mendel Rosenblum, Stanford professor and VMWare Founder from his Stanford course CS142:  https://web.stanford.edu/class/cs142/lectures.html). You may also need free credits from Google and OpenAI.  Study how to Build a Quiz Generator with GenAI and Cloud Run using Google Gen-AI (https://codelabs.developers.google.com/cloud-genai#0) and generate high-quality quizzes for this cloud computing class (e.g., topics in Lecture 1 to 7). Next, describe how you can use any kind of cloud-based software platforms (e.g., Google cloud, Nemobot platform) to build a quiz generator for this cloud computing class. You can also examine a browser-based LLM here (need good Javascript skillset): https://github.com/0hq/WebGPT. Lastly, describe how your Quiz Generator may be implemented using LLM functions (any software, e.g., Google Gen-AI, WebGPT, OpenAI GPT). Your resport should have a section discussing how you explore prompt engineering and LLM functions.

Grading Criteria:

- Report presentation (30%). How well is your report written and presented? 

- Technical novelty  (40%). What have you uncovered from observations, thought experiments, analysis etc?

- Experimentation (30%). Are your experiments sound and scalable?  Are your codes readable and working correctly to generate figures/evidences to your analysis? 